/**

 * [Chart.PieChartLabel.js]{@link https://github.com/emn178/Chart.PieChartLabel.js}
 *
 * @version 0.9.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2017
 * @license MIT
 */





/**


            /*
            ****************************************************************************
            ****************************************************************************
            :::::: Conversions and remapping coordinates, cardinal directions etc ::::::
            ****************************************************************************
            ****************************************************************************
            
            convert the 'digital' cartesian system to the
            'real world' cartesian system. Since It's rotated 90° in the computer world:
                    - East becomes North
                    - South becommes East
                    - West becommes South   &
                    - North becomes West
                    
                    - To convert the Degrees' VALUES from Digital back to Worldy:
                    
                    - 0° becomes -90°
                    - 90° becomes 0°
                    - 180° becomes 90°
                    - 270° becomes 180°
                    - 360° (clockwise from RWQ4 or DLQ3 of 0°) becomes 270°
                    
                    so a cicle goes 
                                    from:
                                            0° - 360°
                                    to:
                                            -90° - 270°
                    
                    RW == Real World
                    DL == Digital [world]
            */









(function () {
    if (typeof Chart === 'undefined') {
        //        console.warn('Can not find Chart object.');
        return;
    }

    function PieChartLabel() {
        console.log("---------< constructor >----------")
        console.log("----------------------------------")
        console.log("------------STEP1:----------------")
        console.log("----------------------------------")
        console.log("-= function PieChartLabel()")
        console.log("----------------------------------")
        this.drawDataset = this.drawDataset.bind(this);
        console.log("------< /constructor >------")

    }







    PieChartLabel.prototype.afterDatasetsDraw = function (chartInstance) {


        ///get center of circle and create outer circle

        //        this.setupLabelColumns(chart center,columnX,columnPadding)
        //        this.setupLabelColumns()

        console.log("----------------------------------")
        console.log("------------STEP2:----------------")
        console.log("----------------------------------")
        console.log("-=  function afterDatasetsDraw(chartInstance)")
        console.log("----------------------------------")
        console.log("----------------------------------")
        console.log("----------------------------------")

        //get outer diameter
        //get 'options' chart-label column props: {x: 0, padding:0}
        //



        if (!this.parseOptions(chartInstance)) {
            return;
        }
        this.labelBounds = [];

        ///code from here and down in this function runs only if there has been a chart created. (and set to the variable of 'chartInstance')





        chartInstance.config.data.datasets.forEach(this.drawDataset);
    };

    PieChartLabel.prototype.drawDataset = function (dataset) {
        var ElementPoints = this.ElementPoints;
        var grid = this.grid;
        var canvasContext = this.canvasContext;
        var chartInstance = this.chartInstance;
        var meta = dataset._meta[Object.keys(dataset._meta)[0]];

//        this.setupChartOuterCircle();
//        this.setupLabel()
//        this.setupLabelColumns();
//        this.setup


        for (var i = 0; i < meta.data.length; i++) {
            //each slice
            ElementPoints["angle"].pointA = meta.data[i]._model.startAngle;
            ElementPoints["angle"].pointB = meta.data[i]._model.endAngle;
            //each slice's cetnerX / centerY -- should all be the same in pie-charts.
            var __centerX = meta.data[i]._model.x;
            var __centerY = meta.data[i]._model.y;


            //label string data
            var __labelText = chartInstance.data.labels[i];



            var __anglePoints = {
                a: ElementPoints["angle"].pointA,
                b: ElementPoints["angle"].pointB
            }
            var __centerPoint = {
                x: __centerX,
                y: __centerY
            }
            this.createLine(__anglePoints, __centerPoint);
            this.createLabel(__labelText);
        }
    };


    PieChartLabel.prototype.createLine = function ($angleRef, $centerPoint) {

        var canvasContext = this.canvasContext;
        var ElementPoints = this.ElementPoints;
        canvasContext.beginPath();

        var __angleInDegree_start = this.convertAngleValue($angleRef.a, "degrees") + 90;
        var __angleInDegree_end = this.convertAngleValue($angleRef.b, "degrees") + 90;


        ElementPoints["angle"].pointA = $angleRef.a;
        ElementPoints["angle"].pointB = $angleRef.b;

        ElementPoints["angle"].median = (ElementPoints["angle"].pointA + ElementPoints["angle"].pointB) / 2;

        var __pointTo_X = Math.cos(ElementPoints["angle"].median) * this.radius;
        var __pointTo_Y = Math.sin(ElementPoints["angle"].median) * this.radius;

        //start point (x/y) of any segment, circle, label etc. 
        ElementPoints["line"].x1 = $centerPoint.x;
        ElementPoints["line"].y1 = $centerPoint.y;
        ElementPoints["line"].x2 = ($centerPoint.x + __pointTo_X)
        ElementPoints["line"].y2 = ($centerPoint.y + __pointTo_Y);

        canvasContext.moveTo(ElementPoints["line"].x1, ElementPoints["line"].y1);
        canvasContext.lineTo(ElementPoints["line"].x2, ElementPoints["line"].y2);

        canvasContext.stroke();
        canvasContext.closePath();
    }


    PieChartLabel.prototype.createLabel = function ($label) {
        var canvasContext = this.canvasContext;
        var ElementPoints = this.ElementPoints;

        canvasContext.beginPath();
        // Defined early and in a function -- scoped variable so that:
        //   -- 'measureText- (function(x:string)) 
        //       can be called, so that each label's position can be manipulated with
        //       this data if necessary.
        var __labelString = $label;

        //returns the quadrant the label will be put in.
        // - start point + end point  on a circle's circumference divided by 2 ()
        var __quadrant = getAngleQuadrant(
            this.convertAngleValue(ElementPoints["angle"].pointA, "degrees"),
            this.convertAngleValue(ElementPoints["angle"].pointB, "degrees")
        );
        canvasContext.font = "20px Verdana";

        ////
        //function() -- measureText(x:label-text-for-each-slice).width
        ///////////////////
        var __labelWidth = Math.ceil(canvasContext.measureText(__labelString).width);
        var __labelHeight = 20; //hard set variable -- set to font size set in "options" of chart.js
        var __offset_labelX = 0;
        var __offset_labelY = 0;
        var __offset_modifier = 10;

        //offset the label depending on it's quadrant location:
        if (__quadrant == 1) {
            //0,0
        }
        if (__quadrant == 2) {
            //w,0
            __offset_labelX = -__labelWidth;
        }
        if (__quadrant == 3) {
            //w,h
            __offset_labelX = -__labelWidth;
            __offset_labelY = -__labelHeight / 2
        }
        if (__quadrant == 4) {
            //0,h
            __offset_labelY = -__labelHeight
        }

        //__labelString - hold the value of each label for a slice in a pie chart
        // pinterLineEndX: 
        // ElementPoints["line"].y2: 
        // __offset_labelY: label's height - set by the label's font size
        // __labelWidth: set by the measureText(x:string) function (method of the canvas' class)
        canvasContext.fillText(__labelString, ElementPoints["line"].x2 + __offset_labelX - __offset_modifier, ElementPoints["line"].y2 + __offset_labelY, __labelWidth);
    }









    /* 
        where the data to setup the "circle" is made and:
        each label's quad and column are defined
        each column's X/Y bounds are created

    steps:
*/



    //bounds for labels (columns)
    PieChartLabel.prototype.setupChartOuterCircle = function ($chartData = null) {
        var columnPositionData = new Object();

//        $chartData.startXY.x;
//        $chartData.startXY.y;
//        $chartData.radius;

    }



    PieChartLabel.prototype.makeDataSkeleton = function ($props = null) {

        this.SliceData = {
            Slice: {
                angleMedian: 0,
                center: {
                    x: 0,
                    y: 0
                },
                quadrant: -1
            },
            Line: {
                LegA: {
                    x1: 0,
                    y1: 0,
                    x2: 0,
                    y2: 0
                },
                LegB: {
                    x1: 0,
                    y1: 0,
                    x2: 0,
                    y2: 0
                }
            },
            Column: {
                left: {
                    t: 0,
                    r: 0,
                    b: 0,
                    l: 0,
                    width: 0,
                    padding: 0
                },
                right: {
                    t: 0,
                    r: 0,
                    b: 0,
                    l: 0,
                    width: 0,
                    padding: 0
                }
            }

        }



    }

    PieChartLabel.prototype.setupLabelColumns = function ($props = null) {

    }

    PieChartLabel.prototype.setupIndicatorLines = function ($props = null) {

    }

    PieChartLabel.prototype.setupLabels = function ($props = null) {

    }






    PieChartLabel.prototype.getAngleQuadrant = function ($angle_start = NaN, $angle_end = NaN) {
        var grid = this.grid;
        var ElementPoints = this.ElementPoints;

        var __sliceMiddle = NaN;
        __sliceMiddle = ($angle_start == NaN || $angle_end == NaN) ? ElementPoints["angle"].median : ($angle_end + $angle_start) / 2
        var QuadrantData = -1;



        /*            //////////////////
                     ///QuadrantData///
                    //////////////////
                    *** if 'doesBorderTwoQuadrants' is T.R.U.E.: use 'quadrant' property:
                    
                    quadrant - which quadrant the angle lives in
                    doesBorderTwoQuadrants - if the angle is in an exact position of:
                        -- 0
                        -- 90
                        -- 180
                        -- 270/360
                        
                    *** if 'doesBorderTwoQuadrants' is F.A.L.S.E.: use 'quadrantBorder' property:
                    quadrantBorder - set to a cardinal direction
                        -each cardinal direction are set as a constant in caps: NORTH SOUTH EAST & WEST, and are then used as the property value of a cardinal direction REMAPPING object as such:
                        
                        -- obj[NORTH] = "east"
                        -- obj[SOUTH] = "south"
                        -- obj[EAST] = "east"
                        -- obj[WEST] = "west"
        */


        var QuadrantData = new Object({
            quadrant: NaN,
            doesBorderTwoQuadrants: false,
            quadrantBorder: NaN
        });



        for (var i = 0; i < grid.length; i++) {
            var __start = grid[i].start;
            var __end = grid[i].end;

            /*
            if (__sliceMiddle == 0) {    
            */ //trying out the range/variance between: 358° - 02°

            if (__sliceMiddle > 358 && __sliceMiddle < 2) {
                //                console.log("Angle is exactly ZERO")
                doesBorderTwoQuadrants.doesBorderTwoQuadrants = true;
                doesBorderTwoQuadrants.quadrantBorder = 0;
                break;
            }
            /*
            } else if (__sliceMiddle == 90) {
            */ //trying out the range/variance: between 88° - 9°2
            // True Cartesian Coordinate:
            //                                EAST
            // Digital Cartesian Coordinate:
            //                                SOUTH
            else if (__sliceMiddle > 88 && __sliceMiddle < 92) {
                //                console.log("Angle is exactly 90")
                doesBorderTwoQuadrants.doesBorderTwoQuadrants = true;
                doesBorderTwoQuadrants.quadrantBorder = 90;
                break;
            }
            /*
            } else if (__sliceMiddle == 180) {
            */ //trying out the range/variance between: 178° - 182° 
            // True Cartesian Coordinate:
            //                                SOUTH
            // Digital Cartesian Coordinate:
            //                                WEST
            else if (__sliceMiddle > 178 && __sliceMiddle < 182) {
                //                console.log("Angle is exactly 180")
                doesBorderTwoQuadrants.doesBorderTwoQuadrants = true;
                doesBorderTwoQuadrants.quadrantBorder = 180;
                break;
            }

            /*
            } else if (__sliceMiddle == 360) {
            */ //trying out the range/variance between: 358° - 02° 
            // True Cartesian Coordinate:
            //                                NORTH
            // Digital Cartesian Coordinate:
            //                                WEST
            if (__sliceMiddle > 358 && __sliceMiddle < 2) {
                //                console.log("Angle is exactly 360")
                doesBorderTwoQuadrants.doesBorderTwoQuadrants = true;
                doesBorderTwoQuadrants.quadrantBorder = 360;

                break;
            } else {
                //if the label is anywhere but 0, 90, 180 or "360" / 270:
                if (__sliceMiddle >= __start && __sliceMiddle <= __end) {
                    QuadrantData.quadrant = grid[i].quadrant;
                    break;
                }
            }
        }
        return QuadrantData;
    }


    PieChartLabel.prototype.convertAngleValue = function ($angle = 0, $to = "radians") {
        var __returnValue = "the parameter supplied was not an acceptable one. use degree/s or radian/s in the form of a string";
        switch ($to) {
            case "degree":
                __returnValue = $angle * (180 / Math.PI);
                break;
            case "degrees":
                __returnValue = $angle * (180 / Math.PI);
                break
            case "radian":
                __returnValue = $angle * (Math.PI / 180);
                break;
            case "radians":
                __returnValue = $angle * (Math.PI / 180);
                break;
            default:
                __returnValue = $angle * (180 / Math.PI);
        }
        return __returnValue;
    }







    PieChartLabel.prototype.parseOptions = function (chartInstance) {
        var PieChartLabel = chartInstance.options.pieChartLabel;
        if (PieChartLabel) {
            //            this.canvasContext = null;
            //            this.pieChart_ReverseMortgage = null;
            //            this.startX = 200; //???
            //            this.startY = 200; //????
            //            this.radius = 100;
            //            this.angle_start = 0;
            //            this.angle_end = Math.PI * 2;
            //            this.canvasElement = null;
            // </end vals the chart.js chart should populate>

            //constant variables to remap cardinal coordinates from worldy to digital
            const NORTH = "EAST";
            const SOUTH = "WEST";
            const EAST = "SOUTH";
            const WEST = "NORTH";

            //constants for parameter values and for setting optional parameter values
            const PADDING = "-=$padding$=-";
            const WIDTH = "-=$width$=-";
            const HEIGHT = "-=$height$=-";
            const XY = "-=$xy$=-";
            const LENGTH = "-=$length$=-";
            const OFFSET = "-=$offset$=-";
            this.SliceData = new Object();
            this.SliceData.Labels = new Array();
            this.SliceData.IndicatorLines =

                this.ElementPoints = {
                    "angle": {
                        pointA: 0,
                        pointB: 0,
                        median: 0
                    },
                    "line": {
                        x1: 0,
                        y1: 0,
                        x2: 0,
                        y2: 0
                    },
                    "label": {
                        x1: 0,
                        y1: 0,
                        x2: 0,
                        y2: 0
                    }
                }


            this.CartesianDegreesRemap = {
                0: -90,
                90: 0,
                180: 180,
                360: 270
            }

            this.grid = [
                {
                    quadrant: 1,
                    NORTH: 0,
                    EAST: 90
                },
                {
                    quadrant: 2,
                    EAST: 90,
                    SOUTH: 180
                },
                {
                    quadrant: 3,
                    SOUTH: 180,
                    WEST: 270
                },
                {
                    quadrant: 4,
                    WEST: 270,
                    NORTH: 360
                }
            ];

            this.chartInstance = chartInstance;
            ///variables that are not actually options FOR "PieChartLabel.JS"
            this.radius = this.chartInstance.outerRadius;
            this.canvasContext = chartInstance.chart.ctx;
            this.options = chartInstance.config.options;
            ////
            ////
            ////
            ////
            //options that can be set in the instantiation of a CHART[.js]
            //this is an option that allows a number for padding to be put around the chart's circumference where the labels will be outside of..
            this.circPad = PieChartLabel.labelColumnX;
            this.render = PieChartLabel.render || PieChartLabel.mode;
            this.position = PieChartLabel.position || 'default';
            this.arc = PieChartLabel.arc;
            this.format = PieChartLabel.format;
            this.precision = PieChartLabel.precision || 0;
            this.fontSize = PieChartLabel.fontSize || this.options.defaultFontSize;
            this.fontColor = PieChartLabel.fontColor || this.options.defaultFontColor;
            this.fontStyle = PieChartLabel.fontStyle || this.options.defaultFontStyle;
            this.fontFamily = PieChartLabel.fontFamily || this.options.defaultFontFamily;
            this.hasTooltip = chartInstance.tooltip._active && chartInstance.tooltip._active.length;
            this.showZero = PieChartLabel.showZero;
            this.overlap = PieChartLabel.overlap;
            this.images = PieChartLabel.images || [];
            this.showActualPercentages = PieChartLabel.showActualPercentages || false;
            return true;
        } else {
            return false;
        }
    };

    Chart.pluginService.register({
        beforeInit: function (chartInstance) {
            chartInstance.PieChartLabel = new PieChartLabel();
        },

        afterDraw: function (chartInstance) {
            chartInstance.PieChartLabel.afterDatasetsDraw(chartInstance);
        }
    });

})();
